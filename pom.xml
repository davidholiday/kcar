<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <groupId>io.holitek.kcar</groupId>
  <artifactId>kcar-parent-pom</artifactId>
  <packaging>pom</packaging>
  <version>1.0-SNAPSHOT</version>

  <name>parent POM for all kcar elements, io.holitek.kcar.routes, chassis, and services</name>

  <modules>
    <!-- elements -->
    <module>elements/health_check_bean</module>
    <module>elements/health_check_processor</module>
    <module>elements/noop_processor</module>

<!--    <module>routes/health_check_route</module>-->
  </modules>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

    <resources-encoding>UTF-8</resources-encoding>

    <java-target-version>11</java-target-version>

    <camel-bom-version>3.7.0</camel-bom-version>

    <javax.servlet-api-version>4.0.1</javax.servlet-api-version>
    <log4j2-version>2.13.3</log4j2-version>
    <jaxb-runtime-version>3.0.0</jaxb-runtime-version>

    <maven-compiler-plugin-version>3.8.1</maven-compiler-plugin-version>
    <maven-resources-plugin-version>3.2.0</maven-resources-plugin-version>
    <maven-javadoc-plugin-version>2.9.1</maven-javadoc-plugin-version>
    <maven-surefire-plugin-version>2.22.2</maven-surefire-plugin-version>

  </properties>

  <dependencyManagement>
    <dependencies>
      <!-- Camel BOM
           a B.ill O.ff M.aterials file is a separate pom file that specifies versions for dependencies-->
      <dependency>
        <groupId>org.apache.camel</groupId>
        <artifactId>camel-bom</artifactId>
        <version>${camel-bom-version}</version>
        <scope>import</scope>
        <type>pom</type>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <!-- camel kernel -->
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-core-engine</artifactId>
    </dependency>

    <!-- bean core-component binds beans to Camel message exchanges. -->
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-bean</artifactId>
    </dependency>

    <!-- log core-component connects to camel to slf4j impl-->
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-log</artifactId>
    </dependency>

    <!-- testing core-component supports junit5 tests -->
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-test-junit5</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- contains the base classes and RouteBuilder which you would use to build Camel io.holitek.kcar.routes and applications. This
     JAR also contains necessary base classes for building custom Camel components, and other kinds of plugins. -->
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-support</artifactId>
    </dependency>

    <!-- contains the public API for Camel (eg interfaces such as CamelContext, Endpoint, Exchange, Message, and so
         on). -->
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-api</artifactId>
    </dependency>

    <!-- camel can parse several languages. this dependency enables us to parse the camel specific language, 'simple'.
         https://camel.apache.org/components/latest/languages/index.html
         https://camel.apache.org/components/latest/languages/simple-language.html -->
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-core-languages</artifactId>
    </dependency>

    <!-- Validator performs declarative validation of the message according to the declared Input Type and/or Output
         Type on a route definition which declares the expected message type. -->
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-validator</artifactId>
    </dependency>

    <!-- logging implementation -->
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-slf4j-impl</artifactId>
      <scope>runtime</scope>
      <version>${log4j2-version}</version>
    </dependency>

  </dependencies>

  <build>
    <defaultGoal>install</defaultGoal>

    <plugins>

      <!-- The Compiler Plugin is used to compile the sources of your project. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${maven-compiler-plugin-version}</version>
        <configuration>
          <source>${java-target-version}</source>
          <target>${java-target-version}</target>
        </configuration>
      </plugin>

      <!-- The Resources Plugin handles the copying of project resources to the output directory.  -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>${maven-resources-plugin-version}</version>
        <configuration>
          <encoding>${resources-encoding}</encoding>
        </configuration>
      </plugin>

      <!-- for javadoc generation -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>${maven-javadoc-plugin-version}</version>
        <executions>
          <execution>
            <goals>
              <goal>jar</goal>
            </goals>
            <configuration>
              <additionalparam>-Xdoclint:none</additionalparam>
              <!-- prevents javadoc error from failing build -->
              <detectJavaApiLink>false</detectJavaApiLink>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- for running unit tests as part of a maven build -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${maven-surefire-plugin-version}</version>
      </plugin>

      <!-- validates source for invalid camel endpoint URIs and reports the coverage oc camel io.holitek.kcar.routes after unit
           testing -->
      <plugin>
        <groupId>org.apache.camel</groupId>
        <artifactId>camel-report-maven-plugin</artifactId>
        <version>${camel-bom-version}</version>
        <executions>
          <execution>
            <phase>process-classes</phase>
            <goals>
              <goal>validate</goal>
              <goal>route-coverage</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>

</project>

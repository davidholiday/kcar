<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <groupId>io.holitek.kcar.chassis</groupId>
  <artifactId>model_ss</artifactId>
  <packaging>war</packaging>
  <version>1.0-SNAPSHOT</version>

  <name>kcar model-ss (servlet with spring)</name>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

    <camel-bom-version>3.7.0</camel-bom-version>
    <log4j2-version>2.14.0</log4j2-version>
    <spring-web-version>5.3.2</spring-web-version>

    <maven-compiler-plugin-version>3.8.1</maven-compiler-plugin-version>
    <maven-resources-plugin-version>3.2.0</maven-resources-plugin-version>
    <maven-javadoc-plugin-version>2.9.1</maven-javadoc-plugin-version>
    <maven-war-plugin-version>3.3.1</maven-war-plugin-version>
    <maven-surefire-plugin-version>2.22.2</maven-surefire-plugin-version>
<!--    <jaxb-runtime-version>3.0.0</jaxb-runtime-version>-->
  </properties>

  <dependencyManagement>
    <dependencies>
      <!-- Camel BOM
           a B.ill O.ff M.aterials file is a separate pom file that specifies versions for dependencies-->
      <dependency>
        <groupId>org.apache.camel</groupId>
        <artifactId>camel-bom</artifactId>
        <version>${camel-bom-version}</version>
        <scope>import</scope>
        <type>pom</type>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>

    <!-- camel kernel -->
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-core-engine</artifactId>
    </dependency>

    <!-- main core-component (has the main class).
         also is means by which camel is configured.
         https://camel.apache.org/components/latest/others/main.html -->
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-main</artifactId>
    </dependency>

    <!-- contains the base classes and RouteBuilder which you would use to build Camel io.holitek.kcar.routes and applications. This
         JAR also contains necessary base classes for building custom Camel components, and other kinds of plugins. -->
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-support</artifactId>
    </dependency>

    <!-- contains the public API for Camel (eg interfaces such as CamelContext, Endpoint, Exchange, Message, and so
         on). -->
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-api</artifactId>
    </dependency>

    <!-- bean core-component binds beans to Camel message exchanges. -->
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-bean</artifactId>
    </dependency>

    <!-- log core-component connects to camel to slf4j impl-->
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-log</artifactId>
    </dependency>

    <!-- The HTTP component provides HTTP based endpoints for calling external HTTP resources (as a client to call
         external servers using HTTP). -->
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-http</artifactId>
    </dependency>

    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-rest</artifactId>
    </dependency>

    <!-- The Rest DSL can be integrated with the camel-swagger-java module which is used for exposing the REST io.holitek.kcar.services
         and their APIs using Swagger. -->
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-swagger-java</artifactId>
      <!-- deals with namespace conflicts in this split library -->
<!--      <exclusions>-->
<!--        <exclusion>-->
<!--          <groupId>com.sun.xml.bind</groupId>-->
<!--          <artifactId>jaxb-impl</artifactId>-->
<!--        </exclusion>-->
<!--        <exclusion>-->
<!--          <groupId>com.sun.xml.bind</groupId>-->
<!--          <artifactId>jaxb-core</artifactId>-->
<!--        </exclusion>-->
<!--      </exclusions>-->
    </dependency>

    <!-- timer core-component is used to generate message exchanges when a timer fires. -->
<!--    <dependency>-->
<!--      <groupId>org.apache.camel</groupId>-->
<!--      <artifactId>camel-timer</artifactId>-->
<!--    </dependency>-->

    <!-- The Servlet component provides HTTP based endpoints for consuming HTTP requests that arrive at a HTTP
         endpoint that is bound to a published Servlet. -->
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-servlet</artifactId>
    </dependency>

    <!-- allows camel to integrate nicely with spring -->
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-spring</artifactId>
      <!-- deals with namespace conflicts in this split library -->
<!--      <exclusions>-->
<!--        <exclusion>-->
<!--          <groupId>com.sun.xml.bind</groupId>-->
<!--          <artifactId>jaxb-impl</artifactId>-->
<!--        </exclusion>-->
<!--        <exclusion>-->
<!--          <groupId>com.sun.xml.bind</groupId>-->
<!--          <artifactId>jaxb-core</artifactId>-->
<!--        </exclusion>-->
<!--      </exclusions>-->
    </dependency>

    <!-- testing core-component supports junit 4.x tests -->
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-test</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- logging implementation -->
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-slf4j-impl</artifactId>
      <scope>runtime</scope>
      <version>${log4j2-version}</version>
    </dependency>

    <!-- we need spring web for the servlet listener-->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
      <version>${spring-web-version}</version>
    </dependency>

    <!-- included to cover the exclusion of deprecated jaxb libs in camel-servletlistener -->
<!--    <dependency>-->
<!--      <groupId>org.glassfish.jaxb</groupId>-->
<!--      <artifactId>jaxb-runtime</artifactId>-->
<!--      <version>${jaxb-runtime-version}</version>-->
<!--    </dependency>-->

  </dependencies>

  <build>
    <defaultGoal>install</defaultGoal>

    <plugins>

      <!-- The Compiler Plugin is used to compile the sources of your project. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${maven-compiler-plugin-version}</version>
        <configuration>
          <source>11</source>
          <target>11</target>
        </configuration>
      </plugin>

      <!-- The Resources Plugin handles the copying of project resources to the output directory.  -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>${maven-resources-plugin-version}</version>
        <configuration>
          <encoding>UTF-8</encoding>
        </configuration>
      </plugin>

      <!-- for javadoc generation -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>${maven-javadoc-plugin-version}</version>
        <executions>
          <execution>
            <goals>
              <goal>jar</goal>
            </goals>
            <configuration>
              <additionalparam>-Xdoclint:none</additionalparam>
              <!-- prevents javadoc error from failing build -->
              <detectJavaApiLink>false</detectJavaApiLink>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- for packaging things as a webapp -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <version>${maven-war-plugin-version}</version>
      </plugin>

      <!-- for running unit tests as part of a maven build -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${maven-surefire-plugin-version}</version>
      </plugin>

      <!-- to validate Camel endpoints: mvn camel-report:validate
           the execution phase setting should cause this to run automatically as part of a build. -->
      <plugin>
        <groupId>org.apache.camel</groupId>
        <artifactId>camel-report-maven-plugin</artifactId>
        <version>${camel-bom-version}</version>
        <executions>
          <execution>
            <phase>process-classes</phase>
            <goals>
              <goal>validate</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Allows app to be via 'mvn camel:run' -->
<!--      <plugin>-->
<!--        <groupId>org.apache.camel</groupId>-->
<!--        <artifactId>camel-maven-plugin</artifactId>-->
<!--        <version>${camel-bom-version}</version>-->
<!--        <configuration>-->
<!--          <logClasspath>true</logClasspath>-->
<!--          <mainClass>io.holitek.kcar.chassis.model_ss.App</mainClass>-->
<!--        </configuration>-->
<!--      </plugin>-->


      <!-- for spinning up the service in self-contained instance of jetty -->
      <plugin>
        <groupId>org.eclipse.jetty</groupId>
        <artifactId>jetty-maven-plugin</artifactId>
        <!-- keep this at v9.x for servlet compatibility with camel httpservlet -->
        <version>9.4.35.v20201120</version>
      </plugin>

    </plugins>
  </build>

</project>

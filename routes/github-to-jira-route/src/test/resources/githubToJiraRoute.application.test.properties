

# all properties are namespaced to the artifact name so when included in a service, there aren't conflicts between
# any of the included properties files.


# when the app is bootstrapped, this file is parsed to see what objects need to be created and included in the camel
# registry.
#
# each route has a set of String member variables that specify the property keys it expects to be in this
# file. each element (routes included) has a similar String member that specifies the name by which it will be
# referenced in the camel registry. that name is the full class name of the element.
#
# this means that the name by which an element is referenced in the camel registry is always unique. it also means
# an instance of the specified element can be created at run time using the same value.
#
# the punchline to all this is that we can get the effect of IoC without having to deal with Guice, Spring, or any
# other framework.


# GithubToJiraRoute elements
#
githubToJiraRoute.entryPoint = direct:start
githubToJiraRoute.exitPoint = mock:result

# to remove line breaks -> https://www.textfixer.com/tools/remove-line-breaks.php
# to beautify -> https://codebeautify.org/graphql-beautifier
githubToJiraRoute.githubGraphQlQuery = {viewer{organization(login: "life360"){repositories(first: 100, ${headers.afterCursor}){pageInfo{hasNextPage}nodes { name pullRequests(first: 100, labels: "dependencies", states: OPEN) { nodes { title url } } vulnerabilityAlerts(first: 100) { nodes { securityVulnerability { advisory { description summary severity references { url } ghsaId origin permalink } } } } } } } } }
#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )


${symbol_pound} all properties are namespaced to the artifact name so when included in a service, there aren't conflicts between
${symbol_pound} any of the included properties files.


${symbol_pound} when the app is bootstrapped, this file is parsed to see what objects need to be created and included in the camel
${symbol_pound} registry.
${symbol_pound}
${symbol_pound} each route has a set of String member variables that specify the property keys it expects to be in this
${symbol_pound} file. each element (routes included) has a similar String member that specifies the name by which it will be
${symbol_pound} referenced in the camel registry. that name is the full class name of the element.
${symbol_pound}
${symbol_pound} this means that the name by which an element is referenced in the camel registry is always unique. it also means
${symbol_pound} an instance of the specified element can be created at run time using the same value.
${symbol_pound}
${symbol_pound} the punchline to all this is that we can get the effect of IoC without having to deal with Guice, Spring, or any
${symbol_pound} other framework.


${symbol_pound} HealthCheckRoute elements
${symbol_pound} entry and exit points require a scheme as the route uses uses 'from/to' which expect a URI. the elements doing work
${symbol_pound} don't require it because the the DSL verb 'bean' is baked into the route at those points.
${symbol_pound}
${artifactIdNamespace}.entryPoint = rest:GET:empty
${artifactIdNamespace}.exitPoint = bean:io.holitek.kcar.elements.NoOpProcessor
